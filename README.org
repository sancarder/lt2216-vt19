* Overview
You will have 4 labs:
|   | Title                                              | Session | Prelim. deadline |
|---+----------------------------------------------------+---------+------------------|
| 1 | [[lab1.org][Building a simple dialogue system in VoiceXML]]      | 8/2     | 18/2             |
| 2 | [[lab2.org][ASR and NLU]]                                        | 15/2    | 25/2             |
| 3 | [[lab3.org][TTS and NLG]]                                        | 22/2    | 4/3              |
| 4 | Building a frame-based dialogue system in VoiceXML | 1/3     | 11/3             |
* Spoken dialogue system architecture
** from Lecture 1
[[./Figures/sds.png]]
** in our case
[[./Figures/lab.png]]
* Calling the application
** using SIP
1. Create an account in Linphone
   (https://www.linphone.org/free-sip-service.html)
2. You will receive an email with your username and domain name
3. Download SIP softphone (macOS: Telephone; iPhone/Android: SessionTalk
   SIP Phone; Windows: Ekiga, X-Lite, Linphone etc., Linux: Ekiga)
4. Try it out: set up your account and dial =vxml@eduserv.flov.gu.se=
5. Check whether speech recognition is working

** using the phone (optional)
031 786 5902

Call routing app (under development): =/usr/local/voxeo/webapps/www/vt19/routing.xml= 
* Server access
eduserv.flov.gu.se (with your student account)
** static files
On the server side you should have an access to =/usr/local/voxeo= where
you can find the webapps, logs, etc.

Static pages should be stored here: =/usr/local/voxeo/webapps/www/vt19=
** dynamic files
You can use Python to generate VoiceXML files. See the example in =/vxml-server= folder.
In order to access the sever from your local web browser you will need to forward server's port. E.g.:
#+BEGIN_SRC sh
ssh -L8099:localhost:8099 eduserv.flov.gu.se
#+END_SRC

* Managing applications in Voxeo
Prophecy Commander: http://eduserv.flov.gu.se:9996

- Docs: http://help.voxeo.com/go/help/prophecy.p18.prophecy
- Prophecy-specific VoiceXML: http://help.voxeo.com/go/help/xml.vxml
* Tips
1. Set up your SSH key: 
   - Generate your key with =ssh-keygen=: [[https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent][follow the GitHub guide]]
   - Once an SSH key has been created, the =ssh-copy-id= command can be
     used to install it as an authorized key on the server. (on
     Windows this would be slightly trickier)
2. SSH config (=~/.ssh/config=) is very handy:
   #+BEGIN_SRC 
   Host eduserv
     HostName eduserv.flov.gu.se
     User <your-gus-username>
     LocalForward 8099 localhost:8099
   #+END_SRC
